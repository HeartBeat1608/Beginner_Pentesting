#!/bin/bash

# This script autogenerates the default pentesting and reporting template for me so that I don't have to make the folders and files myself. 
# It also adds template stuff to the files so it is easy to work with.

usage="""
Automatically Setup a Penetration Testing Workspace with essenatial directories and initial recon scripts.

Usage: ./init.sh <flags>

FLAG  		REQURED	  	DEFAULT		COMMAND

-i IP 		  Yes		None		IP address of the target machine
-n Name 	  Yes		None		Name of the Target Machine (or challenge or any friendly name for reporting)
-d dir 		  No		.			Base Directory for the project folder
-u Name 	  No		\$(whoami)	Name/Slang/Slug of Tester or User
-s 			  No		unset		Whether to run the inital scan or not (this is a boolean flag, it does not require a value)


(Assuming the installation directory is /opt/reporting, the following could be used as an example command)
Example: /opt/reporting/init.sh -i TARGET_IP -n MACHINE_NAME -s
"""

m_ip=""
m_name=""
t_dir="."
tester_name=""
scans=0
src_dir='/opt/github/reporting'


### Function to check if parameter is empty or not
function isempty() {
	if [ ! -z "$1" -a "$1" != " " ]; then
		return 1;
	fi	
	return -1;
}

### Parse flags and arguments
while getopts i:n:d:u:s flag
do
	case "${flag}" in
		i) m_ip=${OPTARG};;
		n) m_name=${OPTARG};;
		d) t_dir=${OPTARG};;
		u) tester_name=${OPTARG};;
		s) scans=1;;
	esac
done

### Null check to avoid un-necessary issues
isempty $m_ip
if [[ $? -ne 1 ]]; then
	echo "[x] Invalid Machine IP"
	echo $usage;
	exit;
fi

isempty $m_name
if [[ $? -ne 1 ]]; then
	echo "[x] Empty Machine Name"
	echo $usage;
	exit;
fi

isempty $t_dir
if [[ $? -ne 1 ]]; then
	echo "[x] Target Directory Empty, will use the current directory"
	t_dir="."
fi

isempty $tester_name

if [[ $? -ne 1 ]]; then
	echo "[x] Tester Name Not specified, using current username as tester name"
	tester_name="$(whoami)"
fi

echo $(ls $src_dir)

### Make workspace
echo "[-] Creating Workspace"
w_dir="$t_dir/$m_name"

mkdir -p "$w_dir/scans"
mkdir -p "$w_dir/exploits"
mkdir -p "$w_dir/scripts"
mkdir -p "$w_dir/notes"
mkdir -p "$w_dir/resources"

echo "[-] Generating README.md"
shopt -s globstar

readme_content_head="# REPORTING - $m_name"
readme_content_div="-----------"
readme_content_subhead="> $tester_name | $(date | cut -d " " -f1,2,3,4)"
remote_loc="$w_dir/README.md"

cp "$src_dir/README_PARTIAL.md" $remote_loc

printf '%s\n' 0a "$readme_content_head" "$readme_content_div" "$readme_content_subhead" . w | ed -s "$remote_loc"

echo "[-] Copying Files"
echo "$m_ip" > "$w_dir/target.txt"
cp "$src_dir/Creds.md" "$w_dir/notes/"
cp "$src_dir/Enum.md" "$w_dir/notes/"
cp "$src_dir/scans.sh" "$w_dir/scans/"
echo "[-] Files Copied to $w_dir/*"

chmod +x "$w_dir/scans/scans.sh"
cd $w_dir

echo "[-] Project Setup complete"

### Scan if asked to
if [[ $scans -eq 1 ]]; then
	echo "[-] Scanning $m_ip for open ports."

	if [[ "$UID" -ne 0 ]]; then
		echo "[x] Elevated previliges required. Execute the following to continue the scans"
		echo "[x] sudo ./scans/scans.sh $(cat target.txt)"
		exit 1
	fi

	cd ./scans/
	exec ./scans.sh $m_ip
	cd ..
fi
